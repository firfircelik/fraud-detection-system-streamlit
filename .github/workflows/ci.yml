name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r backend/requirements.txt
        pip install -r streamlit_requirements.txt
        
    - name: Run Black (Code Formatting)
      run: black --check --diff backend/ streamlit_app.py
      
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff backend/ streamlit_app.py
      
    - name: Run Flake8 (Linting)
      run: flake8 backend/ streamlit_app.py --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Run MyPy (Type Checking)
      run: mypy backend/ --ignore-missing-imports
      
    - name: Run Bandit (Security Linting)
      run: bandit -r backend/ -f json -o bandit-report.json || true
      
    - name: Upload Bandit Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Safety
      run: pip install safety
      
    - name: Run Safety (Dependency Vulnerability Scan)
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload Safety Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-vulnerability-report
        path: safety-report.json

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio httpx
        pip install -r backend/requirements.txt
        
    - name: Run Backend Tests
      env:
        REDIS_URL: redis://localhost:6379
        TESTING: true
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term
        
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: backend/htmlcov/
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Streamlit dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r streamlit_requirements.txt
        pip install pytest
        
    - name: Test Streamlit App Import
      run: |
        python -c "import streamlit_app; print('Streamlit app imports successfully')"
        
    - name: Validate Streamlit App
      run: |
        python -m py_compile streamlit_app.py

  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Backend Docker Image
      run: |
        docker build -f Dockerfile.api -t fraud-detection-api:${{ github.sha }} .
        
    - name: Build Streamlit Docker Image
      run: |
        docker build -f Dockerfile.streamlit -t fraud-detection-streamlit:${{ github.sha }} .
        
    - name: Run Trivy Security Scan - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'fraud-detection-api:${{ github.sha }}'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'
        
    - name: Run Trivy Security Scan - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'fraud-detection-streamlit:${{ github.sha }}'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
        
    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'backend-trivy-results.sarif'
        
    - name: Upload Frontend Trivy Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'frontend-trivy-results.sarif'

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r streamlit_requirements.txt
        pip install pytest httpx
        
    - name: Start Backend Server
      env:
        REDIS_URL: redis://localhost:6379
      run: |
        cd backend
        uvicorn api.main:app --host 0.0.0.0 --port 8080 &
        sleep 10
        
    - name: Test API Endpoints
      run: |
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/api/status || exit 1
        
    - name: Run Integration Tests
      env:
        API_BASE_URL: http://localhost:8080
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/integration/ -v || true

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-security, backend-tests, frontend-tests, docker-build, integration-tests]
    if: always()
    
    steps:
    - name: Build Status Summary
      run: |
        echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Security | ${{ needs.dependency-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY