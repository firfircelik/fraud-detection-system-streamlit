name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scala-version: [3.3.1]
        java-version: [17, 21]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java-version }}

    - name: Cache SBT
      uses: actions/cache@v3
      with:
        path: |
          ~/.sbt
          ~/.ivy2/cache
          ~/.coursier/cache
        key: sbt-cache-${{ runner.os }}-${{ matrix.scala-version }}-${{ hashFiles('**/*.sbt') }}
        restore-keys: |
          sbt-cache-${{ runner.os }}-${{ matrix.scala-version }}-
          sbt-cache-${{ runner.os }}-

    - name: Run tests
      run: sbt test

    - name: Run integration tests
      run: sbt IntegrationTest/test
      env:
        POSTGRES_HOST: localhost
        REDIS_HOST: localhost

    - name: Generate test coverage
      run: sbt coverage test coverageReport

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/scala-*/coverage-report/cobertura.xml

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Cache SBT
      uses: actions/cache@v3
      with:
        path: |
          ~/.sbt
          ~/.ivy2/cache
          ~/.coursier/cache
        key: sbt-cache-${{ runner.os }}-3.3.1-${{ hashFiles('**/*.sbt') }}

    - name: Build application
      run: sbt assembly

    - name: Build Docker image
      run: |
        docker build -t fraud-detection:latest .
        docker save fraud-detection:latest > fraud-detection.tar

    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: fraud-detection.tar

  deploy-staging:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here

  deploy-production:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here

  performance-test:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Run performance tests
      run: sbt "Gatling/testOnly com.frauddetection.PerformanceSimulation"

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}